// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import frc.robot.Constants;
//import frc.robot.commands.*;
//import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import frc.robot.RobotContainer;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.FeedbackDevice;
import com.ctre.phoenix.motorcontrol.InvertType;
import com.ctre.phoenix.motorcontrol.TalonFXInvertType;
import com.ctre.phoenix.motorcontrol.can.TalonFXConfiguration;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;
import edu.wpi.first.wpilibj.XboxController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import com.ctre.phoenix.motorcontrol.NeutralMode;

public class driveSystem extends SubsystemBase {
    private WPI_TalonFX leftFrontMotor;
    private WPI_TalonFX leftBackMotor;
    private WPI_TalonFX rightFrontMotor;
    private WPI_TalonFX rightBackMotor;
    private DifferentialDrive differentialDrive1;
    private XboxController robotController;
    private double leftStickY;
    private double rightStickX;

    public driveSystem() {
        leftFrontMotor = new WPI_TalonFX(1, "rio");
        leftBackMotor = new WPI_TalonFX(2, "rio");
        rightFrontMotor = new WPI_TalonFX(3, "rio");
        rightBackMotor = new WPI_TalonFX(4, "rio");

        TalonFXConfiguration configs = new TalonFXConfiguration();
        configs.primaryPID.selectedFeedbackSensor = FeedbackDevice.IntegratedSensor;
        leftFrontMotor.configAllSettings(configs);

        leftFrontMotor.configFactoryDefault();
        leftFrontMotor.configFactoryDefault();
        leftBackMotor.configFactoryDefault();
        rightFrontMotor.configFactoryDefault();
        rightBackMotor.configFactoryDefault();

        leftFrontMotor.set(ControlMode.PercentOutput, 0);
        leftBackMotor.set(ControlMode.PercentOutput, 0);
        rightFrontMotor.set(ControlMode.PercentOutput, 0);
        rightBackMotor.set(ControlMode.PercentOutput, 0);

        leftBackMotor.follow(leftFrontMotor);
        rightBackMotor.follow(rightFrontMotor);

        rightFrontMotor.setInverted(TalonFXInvertType.CounterClockwise);
        leftFrontMotor.setInverted(TalonFXInvertType.Clockwise);

        rightBackMotor.setInverted(InvertType.FollowMaster);
        leftBackMotor.setInverted(InvertType.FollowMaster);

        // Set motors so they coast when no power is applied
        rightFrontMotor.setNeutralMode(NeutralMode.Coast);
        rightBackMotor.setNeutralMode(NeutralMode.Coast);
        leftFrontMotor.setNeutralMode(NeutralMode.Coast);
        leftBackMotor.setNeutralMode(NeutralMode.Coast);
        

        differentialDrive1 = new DifferentialDrive(leftFrontMotor, rightFrontMotor);
        addChild("Differential Drive 1",differentialDrive1);
        differentialDrive1.setSafetyEnabled(true);
        differentialDrive1.setExpiration(0.1);
        differentialDrive1.setMaxOutput(Constants.motorConstants.maxDriveSpeed);
    }

    @Override
    public void periodic() {
        robotController = RobotContainer.getInstance().getrobotController();
        leftStickY = robotController.getLeftY();
        rightStickX = robotController.getRightX();

        SmartDashboard.putNumber("Left Joystick Y Value", leftStickY);
        SmartDashboard.putNumber("Right Joystick X Value", rightStickX);

        differentialDrive1.arcadeDrive(leftStickY, -rightStickX);
    }

    @Override
    public void simulationPeriodic() {
    }

    public double getSensor() {
        return leftFrontMotor.getSelectedSensorPosition();
    }

    public void arcadeDrive(double y, double x) {
        differentialDrive1.arcadeDrive(y, -x); 
    }
}

